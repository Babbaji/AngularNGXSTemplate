(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.ngxsEntity = {})));
}(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    function getInitialEntityState() {
        return {
            ids: [],
            entities: {}
        };
    }
    function createInitialStateFactory() {
        function getInitialState(additionalState) {
            if (additionalState === void 0) { additionalState = {}; }
            return Object.assign(getInitialEntityState(), additionalState);
        }
        return { getInitialState: getInitialState };
    }

    function createSelectorsFactory() {
        function getSelectors() {
            var selectIds = function (state) { return state.ids; };
            var selectEntities = function (state) { return state.entities; };
            var selectAll = function (state) {
                return selectIds(state).map(function (id) { return selectEntities(state)[id]; });
            };
            var selectTotal = function (state) { return selectIds(state).length; };
            return {
                selectIds: selectIds,
                selectEntities: selectEntities,
                selectAll: selectAll,
                selectTotal: selectTotal
            };
        }
        return { getSelectors: getSelectors };
    }

    var DidMutate;
    (function (DidMutate) {
        DidMutate[DidMutate["EntitiesOnly"] = 0] = "EntitiesOnly";
        DidMutate[DidMutate["Both"] = 1] = "Both";
        DidMutate[DidMutate["None"] = 2] = "None";
    })(DidMutate || (DidMutate = {}));
    function createStateOperator(mutator) {
        return function operation(arg, state) {
            var clonedEntityState = {
                ids: state.ids.slice(),
                entities: __assign({}, state.entities)
            };
            var didMutate = mutator(arg, clonedEntityState);
            if (didMutate === DidMutate.Both) {
                return Object.assign({}, state, clonedEntityState);
            }
            if (didMutate === DidMutate.EntitiesOnly) {
                return __assign({}, state, { entities: clonedEntityState.entities });
            }
            return state;
        };
    }

    function createUnsortedStateAdapter(selectId) {
        function addOneMutably(entity, state) {
            var key = selectId(entity);
            if (key in state.entities) {
                return DidMutate.None;
            }
            state.ids.push(key);
            state.entities[key] = entity;
            return DidMutate.Both;
        }
        function addManyMutably(entities, state) {
            var didMutate = false;
            for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
                var entity = entities_1[_i];
                didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate;
            }
            return didMutate ? DidMutate.Both : DidMutate.None;
        }
        function addAllMutably(entities, state) {
            state.ids = [];
            state.entities = {};
            addManyMutably(entities, state);
            return DidMutate.Both;
        }
        function removeOneMutably(key, state) {
            return removeManyMutably([key], state);
        }
        function removeManyMutably(keys, state) {
            var didMutate = keys.filter(function (key) { return key in state.entities; }).map(function (key) { return delete state.entities[key]; }).length > 0;
            if (didMutate) {
                state.ids = state.ids.filter(function (id) { return id in state.entities; });
            }
            return didMutate ? DidMutate.Both : DidMutate.None;
        }
        function removeAll(state) {
            return Object.assign({}, state, {
                ids: [],
                entities: {}
            });
        }
        function takeNewKey(keys, update, state) {
            var original = state.entities[update.id];
            var updated = Object.assign({}, original, update.changes);
            var newKey = selectId(updated);
            var hasNewKey = newKey !== update.id;
            if (hasNewKey) {
                keys[update.id] = newKey;
                delete state.entities[update.id];
            }
            state.entities[newKey] = updated;
            return hasNewKey;
        }
        function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
        }
        function updateManyMutably(updates, state) {
            var newKeys = {};
            updates = updates.filter(function (update) { return update.id in state.entities; });
            var didMutateEntities = updates.length > 0;
            if (didMutateEntities) {
                var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;
                if (didMutateIds) {
                    state.ids = state.ids.map(function (id) { return newKeys[id] || id; });
                    return DidMutate.Both;
                }
                else {
                    return DidMutate.EntitiesOnly;
                }
            }
            return DidMutate.None;
        }
        function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
        }
        function upsertManyMutably(entities, state) {
            var added = [];
            var updated = [];
            for (var _i = 0, entities_2 = entities; _i < entities_2.length; _i++) {
                var entity = entities_2[_i];
                var id = selectId(entity);
                if (id in state.entities) {
                    updated.push({ id: id, changes: entity });
                }
                else {
                    added.push(entity);
                }
            }
            var didMutateByUpdated = updateManyMutably(updated, state);
            var didMutateByAdded = addManyMutably(added, state);
            switch (true) {
                case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:
                    return DidMutate.None;
                case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:
                    return DidMutate.Both;
                default:
                    return DidMutate.EntitiesOnly;
            }
        }
        return {
            removeAll: removeAll,
            addOne: createStateOperator(addOneMutably),
            addMany: createStateOperator(addManyMutably),
            addAll: createStateOperator(addAllMutably),
            updateOne: createStateOperator(updateOneMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            upsertMany: createStateOperator(upsertManyMutably),
            removeOne: createStateOperator(removeOneMutably),
            removeMany: createStateOperator(removeManyMutably)
        };
    }

    function createSortedStateAdapter(selectId, sort) {
        var _a = createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany, removeAll = _a.removeAll;
        function addOneMutably(entity, state) {
            return addManyMutably([entity], state);
        }
        function addManyMutably(newModels, state) {
            var models = newModels.filter(function (model) { return !(selectId(model) in state.entities); });
            if (models.length === 0) {
                return DidMutate.None;
            }
            else {
                merge(models, state);
                return DidMutate.Both;
            }
        }
        function addAllMutably(models, state) {
            state.entities = {};
            state.ids = [];
            addManyMutably(models, state);
            return DidMutate.Both;
        }
        function updateOneMutably(update, state) {
            return updateManyMutably([update], state);
        }
        function takeUpdatedModel(models, update, state) {
            if (!(update.id in state.entities)) {
                return false;
            }
            var original = state.entities[update.id];
            var updated = Object.assign({}, original, update.changes);
            var newKey = selectId(updated);
            delete state.entities[update.id];
            models.push(updated);
            return newKey !== update.id;
        }
        function updateManyMutably(updates, state) {
            var models = [];
            var didMutateIds = updates.filter(function (update) { return takeUpdatedModel(models, update, state); }).length > 0;
            if (models.length === 0) {
                return DidMutate.None;
            }
            else {
                var originalIds_1 = state.ids;
                var updatedIndexes_1 = [];
                state.ids = state.ids.filter(function (id, index) {
                    if (id in state.entities) {
                        return true;
                    }
                    else {
                        updatedIndexes_1.push(index);
                        return false;
                    }
                });
                merge(models, state);
                if (!didMutateIds && updatedIndexes_1.every(function (i) { return state.ids[i] === originalIds_1[i]; })) {
                    return DidMutate.EntitiesOnly;
                }
                else {
                    return DidMutate.Both;
                }
            }
        }
        function upsertOneMutably(entity, state) {
            return upsertManyMutably([entity], state);
        }
        function upsertManyMutably(entities, state) {
            var added = [];
            var updated = [];
            for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
                var entity = entities_1[_i];
                var id = selectId(entity);
                if (id in state.entities) {
                    updated.push({ id: id, changes: entity });
                }
                else {
                    added.push(entity);
                }
            }
            var didMutateByUpdated = updateManyMutably(updated, state);
            var didMutateByAdded = addManyMutably(added, state);
            switch (true) {
                case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:
                    return DidMutate.None;
                case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:
                    return DidMutate.Both;
                default:
                    return DidMutate.EntitiesOnly;
            }
        }
        function merge(models, state) {
            models.sort(sort);
            var ids = [];
            var i = 0;
            var j = 0;
            while (i < models.length && j < state.ids.length) {
                var model = models[i];
                var modelId = selectId(model);
                var entityId = state.ids[j];
                var entity = state.entities[entityId];
                if (sort(model, entity) <= 0) {
                    ids.push(modelId);
                    i++;
                }
                else {
                    ids.push(entityId);
                    j++;
                }
            }
            if (i < models.length) {
                state.ids = ids.concat(models.slice(i).map(selectId));
            }
            else {
                state.ids = ids.concat(state.ids.slice(j));
            }
            models.forEach(function (model) {
                state.entities[selectId(model)] = model;
            });
        }
        return {
            removeOne: removeOne,
            removeMany: removeMany,
            removeAll: removeAll,
            addOne: createStateOperator(addOneMutably),
            updateOne: createStateOperator(updateOneMutably),
            upsertOne: createStateOperator(upsertOneMutably),
            addAll: createStateOperator(addAllMutably),
            addMany: createStateOperator(addManyMutably),
            updateMany: createStateOperator(updateManyMutably),
            upsertMany: createStateOperator(upsertManyMutably)
        };
    }

    function createEntityAdapter(options) {
        if (options === void 0) { options = {}; }
        var _a = __assign({ sortComparer: false, selectId: function (instance) { return instance.id; } }, options), selectId = _a.selectId, sortComparer = _a.sortComparer;
        var stateFactory = createInitialStateFactory();
        var selectorsFactory = createSelectorsFactory();
        var stateAdapter = sortComparer
            ? createSortedStateAdapter(selectId, sortComparer)
            : createUnsortedStateAdapter(selectId);
        return __assign({ selectId: selectId,
            sortComparer: sortComparer }, stateFactory, selectorsFactory, stateAdapter);
    }

    var Dictionary = /** @class */ (function () {
        function Dictionary() {
        }
        return Dictionary;
    }());

    exports.createEntityAdapter = createEntityAdapter;
    exports.Dictionary = Dictionary;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngxs-entity.umd.js.map
