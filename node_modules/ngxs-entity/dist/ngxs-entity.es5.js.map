{"version":3,"file":"ngxs-entity.es5.js","sources":["../src/entity_state.ts","../src/state_selectors.ts","../src/state_adapter.ts","../src/unsorted_state_adapter.ts","../src/sorted_state_adapter.ts","../src/create_adapter.ts","../src/models.ts"],"sourcesContent":["import { EntityState } from './models'\n\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {}\n  }\n}\n\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>\n  function getInitialState<S extends object>(additionalState: S): EntityState<V> & S\n  function getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState)\n  }\n\n  return { getInitialState }\n}\n","import { EntityState, EntitySelectors } from './models'\n\nexport function createSelectorsFactory<T>() {\n  function getSelectors(): EntitySelectors<T, any> {\n    const selectIds = (state: any) => state.ids\n    const selectEntities = (state: EntityState<T>) => state.entities\n    const selectAll = (state: EntityState<T>): any =>\n      selectIds(state).map((id: any) => (selectEntities(state) as any)[id])\n\n    const selectTotal = (state: EntityState<T>) => selectIds(state).length\n\n    return {\n      selectIds,\n      selectEntities,\n      selectAll,\n      selectTotal\n    }\n  }\n\n  return { getSelectors }\n}\n","import { EntityState } from './models'\n\nexport enum DidMutate {\n  EntitiesOnly,\n  Both,\n  None\n}\n\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => DidMutate\n): EntityState<V>\nexport function createStateOperator<V, R>(mutator: (arg: any, state: any) => DidMutate): any {\n  return function operation<S extends EntityState<V>>(arg: R, state: any): S {\n    const clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities }\n    }\n\n    const didMutate = mutator(arg, clonedEntityState)\n\n    if (didMutate === DidMutate.Both) {\n      return Object.assign({}, state, clonedEntityState)\n    }\n\n    if (didMutate === DidMutate.EntitiesOnly) {\n      return {\n        ...state,\n        entities: clonedEntityState.entities\n      }\n    }\n\n    return state\n  }\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models'\nimport { createStateOperator, DidMutate } from './state_adapter'\n\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): EntityStateAdapter<T>\nexport function createUnsortedStateAdapter<T>(selectId: IdSelector<T>): any {\n  type R = EntityState<T>\n\n  function addOneMutably(entity: T, state: R): DidMutate\n  function addOneMutably(entity: any, state: any): DidMutate {\n    const key = selectId(entity)\n\n    if (key in state.entities) {\n      return DidMutate.None\n    }\n\n    state.ids.push(key)\n    state.entities[key] = entity\n\n    return DidMutate.Both\n  }\n\n  function addManyMutably(entities: T[], state: R): DidMutate\n  function addManyMutably(entities: any[], state: any): DidMutate {\n    let didMutate = false\n\n    for (const entity of entities) {\n      didMutate = addOneMutably(entity, state) !== DidMutate.None || didMutate\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None\n  }\n\n  function addAllMutably(entities: T[], state: R): DidMutate\n  function addAllMutably(entities: any[], state: any): DidMutate {\n    state.ids = []\n    state.entities = {}\n\n    addManyMutably(entities, state)\n\n    return DidMutate.Both\n  }\n\n  function removeOneMutably(key: T, state: R): DidMutate\n  function removeOneMutably(key: any, state: any): DidMutate {\n    return removeManyMutably([key], state)\n  }\n\n  function removeManyMutably(keys: T[], state: R): DidMutate\n  function removeManyMutably(keys: any[], state: any): DidMutate {\n    const didMutate =\n      keys.filter(key => key in state.entities).map(key => delete state.entities[key]).length > 0\n\n    if (didMutate) {\n      state.ids = state.ids.filter((id: any) => id in state.entities)\n    }\n\n    return didMutate ? DidMutate.Both : DidMutate.None\n  }\n\n  function removeAll<S extends R>(state: S): S\n  function removeAll<S extends R>(state: any): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {}\n    })\n  }\n\n  function takeNewKey(keys: { [id: string]: string }, update: Update<T>, state: R): void\n  function takeNewKey(keys: { [id: string]: any }, update: Update<T>, state: any): boolean {\n    const original = state.entities[update.id]\n    const updated: T = Object.assign({}, original, update.changes)\n    const newKey = selectId(updated)\n    const hasNewKey = newKey !== update.id\n\n    if (hasNewKey) {\n      keys[update.id] = newKey\n      delete state.entities[update.id]\n    }\n\n    state.entities[newKey] = updated\n\n    return hasNewKey\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state)\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const newKeys: { [id: string]: string } = {}\n\n    updates = updates.filter(update => update.id in state.entities)\n\n    const didMutateEntities = updates.length > 0\n\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter(update => takeNewKey(newKeys, update, state)).length > 0\n\n      if (didMutateIds) {\n        state.ids = state.ids.map((id: any) => newKeys[id] || id)\n        return DidMutate.Both\n      } else {\n        return DidMutate.EntitiesOnly\n      }\n    }\n\n    return DidMutate.None\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state)\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = []\n    const updated: any[] = []\n\n    for (const entity of entities) {\n      const id = selectId(entity)\n      if (id in state.entities) {\n        updated.push({ id, changes: entity })\n      } else {\n        added.push(entity)\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state)\n    const didMutateByAdded = addManyMutably(added, state)\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:\n        return DidMutate.None\n      case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both\n      default:\n        return DidMutate.EntitiesOnly\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  }\n}\n","import { Comparer, EntityState, EntityStateAdapter, IdSelector, Update } from './models'\nimport { createStateOperator, DidMutate } from './state_adapter'\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\n\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T>\nexport function createSortedStateAdapter<T>(selectId: any, sort: any): any {\n  type R = EntityState<T>\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(selectId)\n\n  function addOneMutably(entity: T, state: R): DidMutate\n  function addOneMutably(entity: any, state: any): DidMutate {\n    return addManyMutably([entity], state)\n  }\n\n  function addManyMutably(newModels: T[], state: R): DidMutate\n  function addManyMutably(newModels: any[], state: any): DidMutate {\n    const models = newModels.filter(model => !(selectId(model) in state.entities))\n\n    if (models.length === 0) {\n      return DidMutate.None\n    } else {\n      merge(models, state)\n      return DidMutate.Both\n    }\n  }\n\n  function addAllMutably(models: T[], state: R): DidMutate\n  function addAllMutably(models: any[], state: any): DidMutate {\n    state.entities = {}\n    state.ids = []\n\n    addManyMutably(models, state)\n\n    return DidMutate.Both\n  }\n\n  function updateOneMutably(update: Update<T>, state: R): DidMutate\n  function updateOneMutably(update: any, state: any): DidMutate {\n    return updateManyMutably([update], state)\n  }\n\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean\n  function takeUpdatedModel(models: any[], update: any, state: any): boolean {\n    if (!(update.id in state.entities)) {\n      return false\n    }\n\n    const original = state.entities[update.id]\n    const updated = Object.assign({}, original, update.changes)\n    const newKey = selectId(updated)\n\n    delete state.entities[update.id]\n\n    models.push(updated)\n\n    return newKey !== update.id\n  }\n\n  function updateManyMutably(updates: Update<T>[], state: R): DidMutate\n  function updateManyMutably(updates: any[], state: any): DidMutate {\n    const models: T[] = []\n\n    const didMutateIds =\n      updates.filter(update => takeUpdatedModel(models, update, state)).length > 0\n\n    if (models.length === 0) {\n      return DidMutate.None\n    } else {\n      const originalIds = state.ids\n      const updatedIndexes: any[] = []\n      state.ids = state.ids.filter((id: any, index: number) => {\n        if (id in state.entities) {\n          return true\n        } else {\n          updatedIndexes.push(index)\n          return false\n        }\n      })\n\n      merge(models, state)\n\n      if (!didMutateIds && updatedIndexes.every((i: number) => state.ids[i] === originalIds[i])) {\n        return DidMutate.EntitiesOnly\n      } else {\n        return DidMutate.Both\n      }\n    }\n  }\n\n  function upsertOneMutably(entity: T, state: R): DidMutate\n  function upsertOneMutably(entity: any, state: any): DidMutate {\n    return upsertManyMutably([entity], state)\n  }\n\n  function upsertManyMutably(entities: T[], state: R): DidMutate\n  function upsertManyMutably(entities: any[], state: any): DidMutate {\n    const added: any[] = []\n    const updated: any[] = []\n\n    for (const entity of entities) {\n      const id = selectId(entity)\n      if (id in state.entities) {\n        updated.push({ id, changes: entity })\n      } else {\n        added.push(entity)\n      }\n    }\n\n    const didMutateByUpdated = updateManyMutably(updated, state)\n    const didMutateByAdded = addManyMutably(added, state)\n\n    switch (true) {\n      case didMutateByAdded === DidMutate.None && didMutateByUpdated === DidMutate.None:\n        return DidMutate.None\n      case didMutateByAdded === DidMutate.Both || didMutateByUpdated === DidMutate.Both:\n        return DidMutate.Both\n      default:\n        return DidMutate.EntitiesOnly\n    }\n  }\n\n  function merge(models: T[], state: R): void\n  function merge(models: any[], state: any): void {\n    models.sort(sort)\n\n    const ids: any[] = []\n\n    let i = 0\n    let j = 0\n\n    while (i < models.length && j < state.ids.length) {\n      const model = models[i]\n      const modelId = selectId(model)\n      const entityId = state.ids[j]\n      const entity = state.entities[entityId]\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId)\n        i++\n      } else {\n        ids.push(entityId)\n        j++\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId))\n    } else {\n      state.ids = ids.concat(state.ids.slice(j))\n    }\n\n    models.forEach(model => {\n      state.entities[selectId(model)] = model\n    })\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  }\n}\n","import { Comparer, EntityAdapter, EntityDefinition, IdSelector } from './models'\nimport { createInitialStateFactory } from './entity_state'\nimport { createSelectorsFactory } from './state_selectors'\nimport { createSortedStateAdapter } from './sorted_state_adapter'\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\n\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>\n    sortComparer?: false | Comparer<T>\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options\n  }\n\n  const stateFactory = createInitialStateFactory<T>()\n  const selectorsFactory = createSelectorsFactory<T>()\n  const stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId)\n\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  }\n}\n","export type ComparerStr<T> = {\n  (a: T, b: T): string\n}\n\nexport type ComparerNum<T> = {\n  (a: T, b: T): number\n}\n\nexport type Comparer<T> = ComparerNum<T> | ComparerStr<T>\n\nexport type IdSelectorStr<T> = {\n  (model: T): string\n}\n\nexport type IdSelectorNum<T> = {\n  (model: T): number\n}\n\nexport type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>\n\nexport type DictionaryNum<T> = {\n  [id: number]: T\n}\n\nexport abstract class Dictionary<T> implements DictionaryNum<T> {\n  [id: string]: T\n}\n\nexport type UpdateStr<T> = {\n  id: string\n  changes: Partial<T>\n}\n\nexport type UpdateNum<T> = {\n  id: number\n  changes: Partial<T>\n}\n\nexport type Update<T> = UpdateStr<T> | UpdateNum<T>\n\nexport interface EntityState<T> {\n  ids: string[] | number[]\n  entities: Dictionary<T>\n}\n\nexport interface EntityDefinition<T> {\n  selectId: IdSelector<T>\n  sortComparer: false | Comparer<T>\n}\n\nexport interface EntityStateAdapter<T> {\n  addOne<S extends EntityState<T>>(entity: T, state: S): S\n  addMany<S extends EntityState<T>>(entities: T[], state: S): S\n  addAll<S extends EntityState<T>>(entities: T[], state: S): S\n\n  removeOne<S extends EntityState<T>>(key: string, state: S): S\n  removeOne<S extends EntityState<T>>(key: number, state: S): S\n\n  removeMany<S extends EntityState<T>>(keys: string[], state: S): S\n  removeMany<S extends EntityState<T>>(keys: number[], state: S): S\n\n  removeAll<S extends EntityState<T>>(state: S): S\n\n  updateOne<S extends EntityState<T>>(update: Update<T>, state: S): S\n  updateMany<S extends EntityState<T>>(updates: Update<T>[], state: S): S\n\n  upsertOne<S extends EntityState<T>>(entity: T, state: S): S\n  upsertMany<S extends EntityState<T>>(entities: T[], state: S): S\n}\n\nexport type EntitySelectors<T, V> = {\n  selectIds: (state: V) => string[] | number[]\n  selectEntities: (state: V) => Dictionary<T>\n  selectAll: (state: V) => T[]\n  selectTotal: (state: V) => number\n}\n\nexport interface EntityAdapter<T> extends EntityStateAdapter<T> {\n  selectId: IdSelector<T>\n  sortComparer: false | Comparer<T>\n  getInitialState(): EntityState<T>\n  getInitialState<S extends object>(state: S): EntityState<T> & S\n  getSelectors(): EntitySelectors<T, EntityState<T>>\n  getSelectors<V>(selectState: (state: V) => EntityState<T>): EntitySelectors<T, V>\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAGE,OAAO;QACL,GAAG,EAAE,EAAE;QACP,QAAQ,EAAE,EAAE;KACb,CAAA;CACF;AAED;IAGE,yBAAyB,eAAyB;QAAzB,gCAAA,EAAA,oBAAyB;QAChD,OAAO,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,EAAE,eAAe,CAAC,CAAA;KAC/D;IAED,OAAO,EAAE,eAAe,iBAAA,EAAE,CAAA;CAC3B;;;ICdC;QACE,IAAM,SAAS,GAAG,UAAC,KAAU,IAAK,OAAA,KAAK,CAAC,GAAG,GAAA,CAAA;QAC3C,IAAM,cAAc,GAAG,UAAC,KAAqB,IAAK,OAAA,KAAK,CAAC,QAAQ,GAAA,CAAA;QAChE,IAAM,SAAS,GAAG,UAAC,KAAqB;YACtC,OAAA,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAC,EAAO,IAAK,OAAC,cAAc,CAAC,KAAK,CAAS,CAAC,EAAE,CAAC,GAAA,CAAC;SAAA,CAAA;QAEvE,IAAM,WAAW,GAAG,UAAC,KAAqB,IAAK,OAAA,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,GAAA,CAAA;QAEtE,OAAO;YACL,SAAS,WAAA;YACT,cAAc,gBAAA;YACd,SAAS,WAAA;YACT,WAAW,aAAA;SACZ,CAAA;KACF;IAED,OAAO,EAAE,YAAY,cAAA,EAAE,CAAA;CACxB;;AClBD,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,yDAAY,CAAA;IACZ,yCAAI,CAAA;IACJ,yCAAI,CAAA;CACL,EAJW,SAAS,KAAT,SAAS,QAIpB;AAKD,6BAA0C,OAA4C;IACpF,OAAO,mBAA6C,GAAM,EAAE,KAAU;QACpE,IAAM,iBAAiB,GAAmB;YACxC,GAAG,EAAM,KAAK,CAAC,GAAG,QAAC;YACnB,QAAQ,eAAO,KAAK,CAAC,QAAQ,CAAE;SAChC,CAAA;QAED,IAAM,SAAS,GAAG,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAA;QAEjD,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;YAChC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAA;SACnD;QAED,IAAI,SAAS,KAAK,SAAS,CAAC,YAAY,EAAE;YACxC,oBACK,KAAK,IACR,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,IACrC;SACF;QAED,OAAO,KAAK,CAAA;KACb,CAAA;CACF;;oCC7B6C,QAAuB;IAInE,uBAAuB,MAAW,EAAE,KAAU;QAC5C,IAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;QAE5B,IAAI,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE;YACzB,OAAO,SAAS,CAAC,IAAI,CAAA;SACtB;QAED,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACnB,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAA;QAE5B,OAAO,SAAS,CAAC,IAAI,CAAA;KACtB;IAGD,wBAAwB,QAAe,EAAE,KAAU;QACjD,IAAI,SAAS,GAAG,KAAK,CAAA;QAErB,KAAqB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAA1B,IAAM,MAAM,iBAAA;YACf,SAAS,GAAG,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,SAAS,CAAC,IAAI,IAAI,SAAS,CAAA;SACzE;QAED,OAAO,SAAS,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;KACnD;IAGD,uBAAuB,QAAe,EAAE,KAAU;QAChD,KAAK,CAAC,GAAG,GAAG,EAAE,CAAA;QACd,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAA;QAEnB,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;QAE/B,OAAO,SAAS,CAAC,IAAI,CAAA;KACtB;IAGD,0BAA0B,GAAQ,EAAE,KAAU;QAC5C,OAAO,iBAAiB,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAA;KACvC;IAGD,2BAA2B,IAAW,EAAE,KAAU;QAChD,IAAM,SAAS,GACb,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,IAAI,KAAK,CAAC,QAAQ,GAAA,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QAE7F,IAAI,SAAS,EAAE;YACb,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,UAAC,EAAO,IAAK,OAAA,EAAE,IAAI,KAAK,CAAC,QAAQ,GAAA,CAAC,CAAA;SAChE;QAED,OAAO,SAAS,GAAG,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;KACnD;IAGD,mBAAgC,KAAU;QACxC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;YAC9B,GAAG,EAAE,EAAE;YACP,QAAQ,EAAE,EAAE;SACb,CAAC,CAAA;KACH;IAGD,oBAAoB,IAA2B,EAAE,MAAiB,EAAE,KAAU;QAC5E,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAC1C,IAAM,OAAO,GAAM,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;QAC9D,IAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAA;QAChC,IAAM,SAAS,GAAG,MAAM,KAAK,MAAM,CAAC,EAAE,CAAA;QAEtC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAA;YACxB,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;SACjC;QAED,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,OAAO,CAAA;QAEhC,OAAO,SAAS,CAAA;KACjB;IAGD,0BAA0B,MAAW,EAAE,KAAU;QAC/C,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KAC1C;IAGD,2BAA2B,OAAc,EAAE,KAAU;QACnD,IAAM,OAAO,GAA6B,EAAE,CAAA;QAE5C,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,GAAA,CAAC,CAAA;QAE/D,IAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAA;QAE5C,IAAI,iBAAiB,EAAE;YACrB,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;YAE5F,IAAI,YAAY,EAAE;gBAChB,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,UAAC,EAAO,IAAK,OAAA,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,GAAA,CAAC,CAAA;gBACzD,OAAO,SAAS,CAAC,IAAI,CAAA;aACtB;iBAAM;gBACL,OAAO,SAAS,CAAC,YAAY,CAAA;aAC9B;SACF;QAED,OAAO,SAAS,CAAC,IAAI,CAAA;KACtB;IAGD,0BAA0B,MAAW,EAAE,KAAU;QAC/C,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KAC1C;IAGD,2BAA2B,QAAe,EAAE,KAAU;QACpD,IAAM,KAAK,GAAU,EAAE,CAAA;QACvB,IAAM,OAAO,GAAU,EAAE,CAAA;QAEzB,KAAqB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAA1B,IAAM,MAAM,iBAAA;YACf,IAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;YAC3B,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAA,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAA;aACtC;iBAAM;gBACL,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;aACnB;SACF;QAED,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAC5D,IAAM,gBAAgB,GAAG,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAErD,QAAQ,IAAI;YACV,KAAK,gBAAgB,KAAK,SAAS,CAAC,IAAI,IAAI,kBAAkB,KAAK,SAAS,CAAC,IAAI;gBAC/E,OAAO,SAAS,CAAC,IAAI,CAAA;YACvB,KAAK,gBAAgB,KAAK,SAAS,CAAC,IAAI,IAAI,kBAAkB,KAAK,SAAS,CAAC,IAAI;gBAC/E,OAAO,SAAS,CAAC,IAAI,CAAA;YACvB;gBACE,OAAO,SAAS,CAAC,YAAY,CAAA;SAChC;KACF;IAED,OAAO;QACL,SAAS,WAAA;QACT,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;QAC1C,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;QAC5C,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;QAC1C,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;QAChD,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;QAClD,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;QAChD,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;QAClD,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;QAChD,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;KACnD,CAAA;CACF;;kCCnJ2C,QAAa,EAAE,IAAS;IAG5D,IAAA,yCAA2E,EAAzE,wBAAS,EAAE,0BAAU,EAAE,wBAAS,CAAyC;IAGjF,uBAAuB,MAAW,EAAE,KAAU;QAC5C,OAAO,cAAc,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KACvC;IAGD,wBAAwB,SAAgB,EAAE,KAAU;QAClD,IAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAA,CAAC,CAAA;QAE9E,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,SAAS,CAAC,IAAI,CAAA;SACtB;aAAM;YACL,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;YACpB,OAAO,SAAS,CAAC,IAAI,CAAA;SACtB;KACF;IAGD,uBAAuB,MAAa,EAAE,KAAU;QAC9C,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAA;QACnB,KAAK,CAAC,GAAG,GAAG,EAAE,CAAA;QAEd,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;QAE7B,OAAO,SAAS,CAAC,IAAI,CAAA;KACtB;IAGD,0BAA0B,MAAW,EAAE,KAAU;QAC/C,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KAC1C;IAGD,0BAA0B,MAAa,EAAE,MAAW,EAAE,KAAU;QAC9D,IAAI,EAAE,MAAM,CAAC,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE;YAClC,OAAO,KAAK,CAAA;SACb;QAED,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAC1C,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;QAC3D,IAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAA;QAEhC,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;QAEhC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAEpB,OAAO,MAAM,KAAK,MAAM,CAAC,EAAE,CAAA;KAC5B;IAGD,2BAA2B,OAAc,EAAE,KAAU;QACnD,IAAM,MAAM,GAAQ,EAAE,CAAA;QAEtB,IAAM,YAAY,GAChB,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,GAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;QAE9E,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,SAAS,CAAC,IAAI,CAAA;SACtB;aAAM;YACL,IAAM,aAAW,GAAG,KAAK,CAAC,GAAG,CAAA;YAC7B,IAAM,gBAAc,GAAU,EAAE,CAAA;YAChC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,UAAC,EAAO,EAAE,KAAa;gBAClD,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;oBACxB,OAAO,IAAI,CAAA;iBACZ;qBAAM;oBACL,gBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBAC1B,OAAO,KAAK,CAAA;iBACb;aACF,CAAC,CAAA;YAEF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;YAEpB,IAAI,CAAC,YAAY,IAAI,gBAAc,CAAC,KAAK,CAAC,UAAC,CAAS,IAAK,OAAA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,aAAW,CAAC,CAAC,CAAC,GAAA,CAAC,EAAE;gBACzF,OAAO,SAAS,CAAC,YAAY,CAAA;aAC9B;iBAAM;gBACL,OAAO,SAAS,CAAC,IAAI,CAAA;aACtB;SACF;KACF;IAGD,0BAA0B,MAAW,EAAE,KAAU;QAC/C,OAAO,iBAAiB,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KAC1C;IAGD,2BAA2B,QAAe,EAAE,KAAU;QACpD,IAAM,KAAK,GAAU,EAAE,CAAA;QACvB,IAAM,OAAO,GAAU,EAAE,CAAA;QAEzB,KAAqB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAA1B,IAAM,MAAM,iBAAA;YACf,IAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAA;YAC3B,IAAI,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAA,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAA;aACtC;iBAAM;gBACL,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;aACnB;SACF;QAED,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAC5D,IAAM,gBAAgB,GAAG,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAErD,QAAQ,IAAI;YACV,KAAK,gBAAgB,KAAK,SAAS,CAAC,IAAI,IAAI,kBAAkB,KAAK,SAAS,CAAC,IAAI;gBAC/E,OAAO,SAAS,CAAC,IAAI,CAAA;YACvB,KAAK,gBAAgB,KAAK,SAAS,CAAC,IAAI,IAAI,kBAAkB,KAAK,SAAS,CAAC,IAAI;gBAC/E,OAAO,SAAS,CAAC,IAAI,CAAA;YACvB;gBACE,OAAO,SAAS,CAAC,YAAY,CAAA;SAChC;KACF;IAGD,eAAe,MAAa,EAAE,KAAU;QACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEjB,IAAM,GAAG,GAAU,EAAE,CAAA;QAErB,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,IAAI,CAAC,GAAG,CAAC,CAAA;QAET,OAAO,CAAC,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE;YAChD,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACvB,IAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;YAC/B,IAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC7B,IAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YAEvC,IAAI,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;gBAC5B,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBACjB,CAAC,EAAE,CAAA;aACJ;iBAAM;gBACL,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAClB,CAAC,EAAE,CAAA;aACJ;SACF;QAED,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE;YACrB,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAA;SACtD;aAAM;YACL,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;SAC3C;QAED,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK;YAClB,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAA;SACxC,CAAC,CAAA;KACH;IAED,OAAO;QACL,SAAS,WAAA;QACT,UAAU,YAAA;QACV,SAAS,WAAA;QACT,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;QAC1C,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;QAChD,SAAS,EAAE,mBAAmB,CAAC,gBAAgB,CAAC;QAChD,MAAM,EAAE,mBAAmB,CAAC,aAAa,CAAC;QAC1C,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC;QAC5C,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;QAClD,UAAU,EAAE,mBAAmB,CAAC,iBAAiB,CAAC;KACnD,CAAA;CACF;;6BCrKC,OAGM;IAHN,wBAAA,EAAA,YAGM;IAEA,IAAA,sGAIL,EAJO,sBAAQ,EAAE,8BAAY,CAI7B;IAED,IAAM,YAAY,GAAG,yBAAyB,EAAK,CAAA;IACnD,IAAM,gBAAgB,GAAG,sBAAsB,EAAK,CAAA;IACpD,IAAM,YAAY,GAAG,YAAY;UAC7B,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC;UAChD,0BAA0B,CAAC,QAAQ,CAAC,CAAA;IAExC,kBACE,QAAQ,UAAA;QACR,YAAY,cAAA,IACT,YAAY,EACZ,gBAAgB,EAChB,YAAY,EAChB;CACF;;;ICPD;KAEC;IAAD,iBAAC;CAAA;;;;"}