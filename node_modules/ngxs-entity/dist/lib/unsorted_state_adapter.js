"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var state_adapter_1 = require("./state_adapter");
function createUnsortedStateAdapter(selectId) {
    function addOneMutably(entity, state) {
        var key = selectId(entity);
        if (key in state.entities) {
            return state_adapter_1.DidMutate.None;
        }
        state.ids.push(key);
        state.entities[key] = entity;
        return state_adapter_1.DidMutate.Both;
    }
    function addManyMutably(entities, state) {
        var didMutate = false;
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
            var entity = entities_1[_i];
            didMutate = addOneMutably(entity, state) !== state_adapter_1.DidMutate.None || didMutate;
        }
        return didMutate ? state_adapter_1.DidMutate.Both : state_adapter_1.DidMutate.None;
    }
    function addAllMutably(entities, state) {
        state.ids = [];
        state.entities = {};
        addManyMutably(entities, state);
        return state_adapter_1.DidMutate.Both;
    }
    function removeOneMutably(key, state) {
        return removeManyMutably([key], state);
    }
    function removeManyMutably(keys, state) {
        var didMutate = keys.filter(function (key) { return key in state.entities; }).map(function (key) { return delete state.entities[key]; }).length > 0;
        if (didMutate) {
            state.ids = state.ids.filter(function (id) { return id in state.entities; });
        }
        return didMutate ? state_adapter_1.DidMutate.Both : state_adapter_1.DidMutate.None;
    }
    function removeAll(state) {
        return Object.assign({}, state, {
            ids: [],
            entities: {}
        });
    }
    function takeNewKey(keys, update, state) {
        var original = state.entities[update.id];
        var updated = Object.assign({}, original, update.changes);
        var newKey = selectId(updated);
        var hasNewKey = newKey !== update.id;
        if (hasNewKey) {
            keys[update.id] = newKey;
            delete state.entities[update.id];
        }
        state.entities[newKey] = updated;
        return hasNewKey;
    }
    function updateOneMutably(update, state) {
        return updateManyMutably([update], state);
    }
    function updateManyMutably(updates, state) {
        var newKeys = {};
        updates = updates.filter(function (update) { return update.id in state.entities; });
        var didMutateEntities = updates.length > 0;
        if (didMutateEntities) {
            var didMutateIds = updates.filter(function (update) { return takeNewKey(newKeys, update, state); }).length > 0;
            if (didMutateIds) {
                state.ids = state.ids.map(function (id) { return newKeys[id] || id; });
                return state_adapter_1.DidMutate.Both;
            }
            else {
                return state_adapter_1.DidMutate.EntitiesOnly;
            }
        }
        return state_adapter_1.DidMutate.None;
    }
    function upsertOneMutably(entity, state) {
        return upsertManyMutably([entity], state);
    }
    function upsertManyMutably(entities, state) {
        var added = [];
        var updated = [];
        for (var _i = 0, entities_2 = entities; _i < entities_2.length; _i++) {
            var entity = entities_2[_i];
            var id = selectId(entity);
            if (id in state.entities) {
                updated.push({ id: id, changes: entity });
            }
            else {
                added.push(entity);
            }
        }
        var didMutateByUpdated = updateManyMutably(updated, state);
        var didMutateByAdded = addManyMutably(added, state);
        switch (true) {
            case didMutateByAdded === state_adapter_1.DidMutate.None && didMutateByUpdated === state_adapter_1.DidMutate.None:
                return state_adapter_1.DidMutate.None;
            case didMutateByAdded === state_adapter_1.DidMutate.Both || didMutateByUpdated === state_adapter_1.DidMutate.Both:
                return state_adapter_1.DidMutate.Both;
            default:
                return state_adapter_1.DidMutate.EntitiesOnly;
        }
    }
    return {
        removeAll: removeAll,
        addOne: state_adapter_1.createStateOperator(addOneMutably),
        addMany: state_adapter_1.createStateOperator(addManyMutably),
        addAll: state_adapter_1.createStateOperator(addAllMutably),
        updateOne: state_adapter_1.createStateOperator(updateOneMutably),
        updateMany: state_adapter_1.createStateOperator(updateManyMutably),
        upsertOne: state_adapter_1.createStateOperator(upsertOneMutably),
        upsertMany: state_adapter_1.createStateOperator(upsertManyMutably),
        removeOne: state_adapter_1.createStateOperator(removeOneMutably),
        removeMany: state_adapter_1.createStateOperator(removeManyMutably)
    };
}
exports.createUnsortedStateAdapter = createUnsortedStateAdapter;
//# sourceMappingURL=unsorted_state_adapter.js.map