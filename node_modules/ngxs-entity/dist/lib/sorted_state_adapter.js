"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var state_adapter_1 = require("./state_adapter");
var unsorted_state_adapter_1 = require("./unsorted_state_adapter");
function createSortedStateAdapter(selectId, sort) {
    var _a = unsorted_state_adapter_1.createUnsortedStateAdapter(selectId), removeOne = _a.removeOne, removeMany = _a.removeMany, removeAll = _a.removeAll;
    function addOneMutably(entity, state) {
        return addManyMutably([entity], state);
    }
    function addManyMutably(newModels, state) {
        var models = newModels.filter(function (model) { return !(selectId(model) in state.entities); });
        if (models.length === 0) {
            return state_adapter_1.DidMutate.None;
        }
        else {
            merge(models, state);
            return state_adapter_1.DidMutate.Both;
        }
    }
    function addAllMutably(models, state) {
        state.entities = {};
        state.ids = [];
        addManyMutably(models, state);
        return state_adapter_1.DidMutate.Both;
    }
    function updateOneMutably(update, state) {
        return updateManyMutably([update], state);
    }
    function takeUpdatedModel(models, update, state) {
        if (!(update.id in state.entities)) {
            return false;
        }
        var original = state.entities[update.id];
        var updated = Object.assign({}, original, update.changes);
        var newKey = selectId(updated);
        delete state.entities[update.id];
        models.push(updated);
        return newKey !== update.id;
    }
    function updateManyMutably(updates, state) {
        var models = [];
        var didMutateIds = updates.filter(function (update) { return takeUpdatedModel(models, update, state); }).length > 0;
        if (models.length === 0) {
            return state_adapter_1.DidMutate.None;
        }
        else {
            var originalIds_1 = state.ids;
            var updatedIndexes_1 = [];
            state.ids = state.ids.filter(function (id, index) {
                if (id in state.entities) {
                    return true;
                }
                else {
                    updatedIndexes_1.push(index);
                    return false;
                }
            });
            merge(models, state);
            if (!didMutateIds && updatedIndexes_1.every(function (i) { return state.ids[i] === originalIds_1[i]; })) {
                return state_adapter_1.DidMutate.EntitiesOnly;
            }
            else {
                return state_adapter_1.DidMutate.Both;
            }
        }
    }
    function upsertOneMutably(entity, state) {
        return upsertManyMutably([entity], state);
    }
    function upsertManyMutably(entities, state) {
        var added = [];
        var updated = [];
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
            var entity = entities_1[_i];
            var id = selectId(entity);
            if (id in state.entities) {
                updated.push({ id: id, changes: entity });
            }
            else {
                added.push(entity);
            }
        }
        var didMutateByUpdated = updateManyMutably(updated, state);
        var didMutateByAdded = addManyMutably(added, state);
        switch (true) {
            case didMutateByAdded === state_adapter_1.DidMutate.None && didMutateByUpdated === state_adapter_1.DidMutate.None:
                return state_adapter_1.DidMutate.None;
            case didMutateByAdded === state_adapter_1.DidMutate.Both || didMutateByUpdated === state_adapter_1.DidMutate.Both:
                return state_adapter_1.DidMutate.Both;
            default:
                return state_adapter_1.DidMutate.EntitiesOnly;
        }
    }
    function merge(models, state) {
        models.sort(sort);
        var ids = [];
        var i = 0;
        var j = 0;
        while (i < models.length && j < state.ids.length) {
            var model = models[i];
            var modelId = selectId(model);
            var entityId = state.ids[j];
            var entity = state.entities[entityId];
            if (sort(model, entity) <= 0) {
                ids.push(modelId);
                i++;
            }
            else {
                ids.push(entityId);
                j++;
            }
        }
        if (i < models.length) {
            state.ids = ids.concat(models.slice(i).map(selectId));
        }
        else {
            state.ids = ids.concat(state.ids.slice(j));
        }
        models.forEach(function (model) {
            state.entities[selectId(model)] = model;
        });
    }
    return {
        removeOne: removeOne,
        removeMany: removeMany,
        removeAll: removeAll,
        addOne: state_adapter_1.createStateOperator(addOneMutably),
        updateOne: state_adapter_1.createStateOperator(updateOneMutably),
        upsertOne: state_adapter_1.createStateOperator(upsertOneMutably),
        addAll: state_adapter_1.createStateOperator(addAllMutably),
        addMany: state_adapter_1.createStateOperator(addManyMutably),
        updateMany: state_adapter_1.createStateOperator(updateManyMutably),
        upsertMany: state_adapter_1.createStateOperator(upsertManyMutably)
    };
}
exports.createSortedStateAdapter = createSortedStateAdapter;
//# sourceMappingURL=sorted_state_adapter.js.map